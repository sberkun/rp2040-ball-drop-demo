// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// mdrive //
// ------ //

#define mdrive_wrap_target 0
#define mdrive_wrap 7

static const uint16_t mdrive_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block                      
    0x6040, //  1: out    y, 32                      
    0xa022, //  2: mov    x, y                       
    0x0043, //  3: jmp    x--, 3                     
    0xe001, //  4: set    pins, 1                    
    0xa222, //  5: mov    x, y                   [2] 
    0x0046, //  6: jmp    x--, 6                     
    0xe000, //  7: set    pins, 0                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program mdrive_program = {
    .instructions = mdrive_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config mdrive_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + mdrive_wrap_target, offset + mdrive_wrap);
    return c;
}

static inline void mdrive_program_init(PIO pio, uint sm, uint offset, uint pin) {
   pio_gpio_init(pio, pin);
   pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
   pio_sm_config c = mdrive_program_get_default_config(offset);
   sm_config_set_set_pins(&c, pin, 1);
   sm_config_set_clkdiv_int_frac(&c, 125, 0);
   pio_sm_init(pio, sm, offset, &c);
}
static inline void mdrive_all_setup(uint pin) {
    PIO pio = pio0;
    uint offset = pio_add_program(pio, &mdrive_program);
    mdrive_program_init(pio, 0, offset, pin);
    pio_sm_set_enabled(pio, 0, true);
}
static inline void mdrive_go(uint64_t step) {
    pio_sm_put(pio0, 0, (uint32_t)(step - 5));
}

#endif

